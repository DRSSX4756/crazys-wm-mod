# This script reads in all the traits from the given directory, and generates a C++ header
# defining these as constants from it

import sys
from pathlib import Path
from xml.etree import ElementTree as ET
from collections import namedtuple
import textwrap


TraitSpec = namedtuple("TraitSpec", ["name", "description"])


def parse_trait(trait: ET.Element):
    name = trait.attrib["Name"]
    description = None

    for child in trait:
        if child.tag == "description":
            if description is None:
                description = child.text
            else:
                print(f"Warning: Duplicate description for trait {name}")
        elif child.tag == "Modifiers":
            pass
        elif child.tag == "Excludes":
            pass
        elif child.tag == "Properties":
            pass
        else:
            print(f"Warning: Unknown element {child.tag} for trait {name}")

    return TraitSpec(name=name, description=description)


def parse_file(traits_file: Path):
    doc = ET.fromstring(traits_file.read_text())

    traits = []

    for child in doc:
        if child.tag == "Trait":
            traits.append(parse_trait(child))
        elif child.tag == "Default":
            pass
        elif child.tag == "MutexGroup":
            pass
        elif child.tag == "Modifier":
            pass
        else:
            print("Warning: Unknown tag ", child.tag)

    return traits


def name_as_identifier(trait_name: str):
    return trait_name.upper().replace(" ", "_").replace("-", "_")


def format_description(description: str):
    description = textwrap.wrap(description, width=80)
    description = "\n".join(description)
    return description.replace("\n", "\n    /// ")


def main():
    search_path = Path(sys.argv[1])
    result_path = Path(sys.argv[2])
    result_path.parent.mkdir(exist_ok=True, parents=True)

    out_text = "/// This file is automatically generated. Do not change, modifications will be overwritten.\n\n"
    out_text += "#pragma once\n\n"
    out_text += "namespace traits {\n"
    for traits_file in search_path.glob("*.xml"):
        out_text += f"\n\n    // {traits_file.name}\n"
        new_traits = parse_file(traits_file)
        for trait in new_traits:
            if trait.description is not None:
                out_text += f"    /// {format_description(trait.description)}\n"
            out_text += f"    constexpr const char* {name_as_identifier(trait.name)} = \"{trait.name}\";\n\n"
    out_text += "}\n"
    result_path.write_text(out_text)


if __name__ == "__main__":
    main()
